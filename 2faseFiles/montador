#!/usr/bin/python3
# -*- coding: utf-8 -*-
"""
Lê, na entrada padrão, um programa na linguagem de montagem da máquina
virtual e retorna um programa em C que executa este programa.

Uso:
    montador < entrada > saida
"""
from sys import stdin

l = stdin.readline()
ip = 0
tabsim = {}

print('#include <stdio.h>')
print('#include "maq.h"')
print("INSTR prog[] = {")
while l:
    label = op = ""
    try:
        l = l[:l.index('#')]
    except:
        pass
        keys = list()
    keys = l.split()
    if len(keys) > 0 and keys[0].endswith(":"):
        label = keys[0][:-1]                                      #jogando fora o ':'
        tabsim[label]=ip
        keys.pop(0)
    if len(keys) > 0:
        op = keys.pop(0)
    #if len(keys) > 0:
        #arg = keys.pop(0)                                       #implementação anterior
        #if arg in tabsim:
            #arg = tabsim[arg]
    if op != '':
        print('{%s, ' %op),                                          #a virgula serve para imprimir na mesma linha
    if len(keys) != 0:                                               # Se a função for do tipo que recebe mais argumentos, inteiros e um Tipo
        if type(keys[0]) is str:
            print '%s,' %keys.pop(0),
        else:
            print(','),
        print('{'),
        if len(keys) != 0:
            print (', '.join(keys)),
        print('}'),
    else:
        print('NONE,{0}'),                                            #Se a função não carece de argumentos
        ip -= 1
    l = stdin.readline()
    if l:
        print "},"
    else:
        print "}"
    ip += 1 #avançar a instrução
print("};")

#Funcao Main
print('');
print("int main(int ac, char **av) {");
print("	Maquina *maq = cria_maquina(prog);");
print("	exec_maquina(maq, 1000);");
print("	destroi_maquina(maq);");
print("	return 0;");
print("}");

# Local variables:
# mode: python
# End:
