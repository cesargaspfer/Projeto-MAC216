\documentclass[12pt, a4paper]{article}
\usepackage[utf8]{inputenc}
\usepackage{enumitem}
\usepackage[a4paper, total={7in, 9in}]{geometry}
\usepackage{listings}
\usepackage{graphicx}
\begin{document}
\title {\textbf{MAC 216} \\ Relatório da segunda parte do projeto\\}
\author {César Gasparini Fernandes (10297630) \\ Artur M. R. dos
Santos (10297734)\\ Daniel Silva Nunes (10297612)}
\date {22/10/2017}
\maketitle
\section{Visão geral}
Na segunda fase do projeto, implementamos o código em arena.c, juntamente com o arena.h, que representam a arena em que as batalhas entre os exércitos de robôs ocorrerão no jogo. Ela possui as funções de sistema, criação e destruição de um robô, atualização, coleção dos cristais, ataque, encerramento do jogo, movimentação e, claro, a de inicialização da arena.
Portanto, na nossa implementação, a arena que gerencia todo o
jogo, executando as principais funções para que o jogo possa
ocorrer.\par
A movimentação foi feita usando o grid hexagonal, de forma que
valores determinam para qual local o robô se movimenta (descrito
no código de arena.c).\par
A função de ataque possui somente uma opção de ataque, mas
futuramente iremos implementar ataques diferenciados para os
robôs.\par
Para a segunda fase do projeto, o sistema está elaborado de modo a administrar as ações de uma máquina no jogo, possuindo apenas a estrutura geral de um escalonador, mas que ainda não lida com múltiplos robôs e exércitos. \par
A função sistema, a principal do programa, gerencia todo o cenário
do jogo, sendo a única que manipula a pilha de forma direta.
Ademais, é necessário uma requisição ao sistema para que os robôs
possam executar seus pedidos, assim, evitamos possíveis ações
indesejadas e trapaças (cheats).\par
Os arquivos da 1 a fase necessitaram algumas alterações:\par
\begin{itemize}

\item O montador foi adaptado de modo a compor o array \textbf{prog} no código gerado com o formato correto do instrução, que agora conta com um \textbf{OpCode} e um \textbf{Operando}. Operandos possuem um \textbf{tipo} e um valor. (Ver exemplo do montador abaixo)
\item O maq.c, que possui as instruções, recebeu cases adicionais para
tratar as interações com a arena. Por consequência, a struct \textbf{Máquina}, em maq.h, recebeu alterações em sua struct. Os valores que estão
dentro das structs 'Célula' e 'Robô' foram acessados de maneira
diferente da implementação anterior, pois agora acessamos valores
destas.
\item As instruções em \textbf{instr.h} foram ampliadas, como dito anteriormente, e sua estrutura foi levemente alterada. Foram especificados
novos tipos, direções para movimentação na arena, e o operando
(OPERANDO) recebeu novos valores que foram implementados por meio
de uma struct e uma union. Uma observação: a union foi criada
porque temos o intuito de criar um 'box' na próxima fase do
projeto (na parte gráfica), e portanto, poderemos acessar os
valores que desejamos apenas 'chamando' essa union.
Maiores detalhes de implementação estão detalhados no código do
programa.
\end{itemize}

\section{Testes}
\subsection{Montador}
O seguinte código em "linguagem de máquina" no arquivo \textbf{tprog} foi dado na entrada do montador pela entrada padrão e gerou o seguinte código em linguagem C no arquivo \textbf{tprog.c} como está mostrado a seguir:
\begin{center}
Código em tprog:
\lstinputlisting{tprogtex}

Código em tprog.c:
\lstinputlisting[language = C]{tprogtex.c}
\end{center}
O código em tprog foi feito a fim de testar o funcionamento das novas funções que realizam operações aritméticas. O resultado obtido a partir da execução do arquivo "arena", executável do tprog.c, foi:
\begin{lstlisting}
2
3
16
1
\end{lstlisting}
\subsection{Chamadas ao sistema}
O jogador faz chamadas ao sistema usando principalmente cinco das funções implementadas em maq.c. São elas:
\begin{itemize}
\item MOV \textit{Dir}: Solicitação para mover-se na arena para uma nova célula, indica pelo argumento Dir, que pode assumir os valores NORTH, SOUTH, NORTHEAST, SOUTHEAST, NORTHWEST, SOUTHWEST ou CURRENT.
\item ATK \textit{Dir}: Ataca a célula vizinha ou a própria célula indicada pela direção do argumento Dir, com comportamento similar ao da função MOV.
\item CLT \textit{Dir}: Coleta cristais, se existirem, na célula vizinha indicada pelo argumento Dir, com comportamento similar ao das funções anteriores.
\item INF: Solicita ao sistema informações sobre a célula em que ele está. O sistema então empilha um objeto do tipo \textbf{Celula} na pilha de dados da máquina.
\item DEP \textit{Dir}: Deposita cristais na célula indicada por Dir.

Executando o código a seguir:
\lstinputlisting{tprogtex2}
Obteve-se a seguinte saída:
\lstinputlisting{output}
Que significa, de acordo com cada linha, que:
\begin{itemize}
\item O robô conseguiu se mover para a célula norte 
\item Não conseguiu atacar a célula ao norte de sua posição (pois ela está vazia, só há um robô na arena por enquanto)
\item A informação pedida sobre célula atual, o atributo 1 (que é se está vazia ou não), retornou 0 (falso, mas \textbf{vazia} é int na structure Celula)
\item Tentou coletar cristais na célula sul mas não conseguiu, pois não havia cristais lá, então retornou falso.
\item Tentou depositar seu cristais na célula a sudeste de sua posição, mas não conseguiu porque não possui cristais.
\end{itemize}

\end{itemize}
\end{document}